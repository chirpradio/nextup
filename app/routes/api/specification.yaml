openapi: 3.0.0
info:
  version: 1.3.0
  title: NextUp API
  description: An API for working with the CHIRP Radio music library
servers:
  - url: http://nextup.chirpradio.org/api
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Most endpoints require an `Authorization: Bearer <token>` header, where `token` is the value retrieved from authorizing against the /token endpoint."
  schemas:
    CrateItem:
      properties:
        album:
          type: string
        artist:
          type: string
        label: 
          type: string
        notes:
          type: string
        track:
          type: string
        categories:
          type: array
        encodedKey:
          type: string
    Key:
      properties:
        id:
          type: integer
        name:
          type: string
        kind:
          type: string
        path:
          type: array
        required:
          - kind
          - path
    KeyPath:      
      properties:
        key: 
          type: array
      # example:
      #   key: ["IndexerTransaction", {"type":"DatastoreInt","value":"1603156624060411"}, "Track", "djdb/t:vol01/20201019-201216/8259b9a4fa17078443fdd04109e42db952946aeb"]
    Spot:
      properties:
        __key:
          $ref: '#/components/schemas/Key'
          readOnly: true
        id:          
          type: integer
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
        active:
          type: boolean
        title:
          type: string
        type:
          type: string
          enum: [Live Read Promo, Recorded Promo, Live Read PSA, Recorded PSA, Underwriting Spot, Pledge Liner, Station ID,]       
      required:
        - title
        - type
    SpotCopy:
      properties:
        id:          
          type: integer
          readOnly: true
        author:
          type: object
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        updated:          
          type: string
          format: date-time
          readOnly: true
        __key:
          $ref: '#/components/schemas/Key'
          readOnly: true
        body:
          type: string
        expire_on:
          type: string
          format: date-time
        start_on:
          type: string
          format: date-time
      required:
        - body
    TrafficLogEntry:
      properties:
        created:
          type: string
          format: date-time
          readOnly: true
        log_date:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        reader:
          $ref: '#/components/schemas/Key'
          readOnly: true
          nullable: true
        readtime:
          type: string
          format: date-time
          nullable: true 
        spot:
          $ref: '#/components/schemas/Spot'
        spot_copy:
          $ref: '#/components/schemas/SpotCopy'
        scheduled:
          $ref: '#/components/schemas/Key'
        dow: 
          type: integer
        hour: 
          type: integer
        slot: 
          type: integer
    ArrayOfSpots:
      type: array
      items:
        $ref: '#/components/schemas/Spot'
    ArrayOfTrafficLogEntries:
      type: array
      items:
        $ref: '#/components/schemas/TrafficLogEntry'
    PlaylistTrack:
      properties:
        artist:
          type: array
        album:
          type: array
        track:
          type: array
        categories:
          type: array
          items:
            type: string
            enum:
              - heavy_rotation
              - light_rotation
              - local_classic
              - local_current
        notes: 
          type: string
    FreeformPlaylistTrack:
      properties:
        artist:
          type: object
          properties:
            name:
              type: string
        album:
          type: object
          properties:
            title:
              type: string
            label:
              type: string         
        track:
          type: object
          properties:
            title: string
        notes:
          type: string
        categories:
          type: array
          items:
            type: string
            enum:
              - heavy_rotation
              - light_rotation
              - local_classic
              - local_current
paths:
  /token:
    post:
      summary: Get an authorization token
      description: Authenticate with email and password to retrieve a JSON Web Token (JWT) you can use to authorize against other API endpoints.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password: 
                  type: string
              required:
                - email
                - password
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                password: 
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:   
                  token:
                    type: string
  /album/tag:
    get:
      security:
        - Bearer: []
      summary: Get albums with a tag
      description: Returns albums with a given tag  
      tags:
        - Albums          
      parameters:
        - name: tag
          in: query
          required: true
          schema:
            type: string
            enum: 
              - heavy_rotation
              - light_rotation
              - local_current
              - local_classic         
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
          description: The number of albums to return. 
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
          description: The index of the first album to return. Use with limit to get the next set of albums.
      responses:
        '200':
          description: Successful response  
  /album/recent:
    get:
      security:
        - Bearer: []
      summary: Get recently added albums
      description: Returns albums added after a given date and time that aren't in rotation ("library adds")
      tags:
        - Albums
      parameters:
        - name: timestamp
          in: query
          required: false
          schema:
            type: integer
          description: 'The number of milliseconds since January 1, 1970, 00:00:00 UTC (the ECMAScript epoch, equivalent to the UNIX epoch), with leap seconds ignored. Default: 28 days before the time of the request'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
          description: The number of albums to return 
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
          description: The index of the first album to return. Use with limit to get the next set of albums.
      responses:
        '200':
          description: Successful response  
  /album/{album_id}:
    get:
      security:
        - Bearer: []
      summary: Get an album
      description: Returns an album, including the artist, tracks, reviews, and comments            
      tags:
        - Albums
      parameters:
        - name: album_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
        '404':
          description: Not found
  /album/{album_id}/track/{track_num}:
    patch:
      security:
        - Bearer: []
      summary: Update a track
      description: Tag a track as explicit, recommended, or neither
      tags:
        - Albums
      parameters:
        - name: album_id
          in: path
          required: true
          schema:
            type: integer
        - name: track_num
          in: path
          required: true
          schema:
            type: integer
        - name: tags
          in: body
          required: true
          schema:
            type: array 
            items:
              type: string
              enum:
                - explicit
                - recommended              
      responses:
        '200':
          description: Updated
  /artist/{id}:
    get:
      security:
        - Bearer: []
      summary: Get an artist
      description: Returns an artist 
      tags:
        - Artists        
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          # examples:
          #   withoutParent:
          #     summary: Artist id only (older artist additions)
          #     value: 11286
          #   withParent:
          #     summary: A combination of Artist id and a parent IndexerTransaction id (newer artist additions)
          #     value:  artist:0f91762d84207016d7a3e8ba19fa7c2a78558000-1388263575298362
      responses:
        '200':
          description: Successful response
        '404':
          description: Not found
  /artist/{id}/albums:
    get:
      security:
        - Bearer: []
      summary: Get an artist's albums
      description: Returns an artist's albums   
      tags:
        - Artists     
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          # examples:
          #   withoutParent:
          #     summary: Artist id only (older artist additions)
          #     value: 11286
          #   withParent:
          #     summary: A combination of Artist id and a parent IndexerTransaction id (newer artist additions)
          #     value:  artist:0f91762d84207016d7a3e8ba19fa7c2a78558000-1388263575298362
      responses:
        '200':
          description: Successful response
        '404':
          description: Not found
  /crate:
    get:
      security:
        - Bearer: []
      summary: List crates
      tags:
        - Crates
      description: Lists all crates owned by the authorized user            
      responses:
        '200':
          description: Successful response
  /crate/{id}:
    get:
      security:
        - Bearer: []
      summary: Get a crate  
      tags:
        - Crates 
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer   
      responses:
        '200':
          description: Successful response
        '403':
          description: Forbidden
    post:
      security:
        - Bearer: []
      summary: Add a crate
      tags:
        - Crates
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: name
          in: body
          schema:
            type: string
      responses: 
        '200':
          description: Successful response
        '400':
          description: Bad request
    patch:
      security:
        - Bearer: []
      summary: Update a crate
      tags:
        - Crates
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: name
          in: body
          schema:
            type: string
      responses: 
        '200':
          description: Successful response
        '400':
          description: Bad request
        '403':
          description: Forbidden
    delete:
      security:
        - Bearer: []
      summary: Delete a crate
      tags:
        - Crates
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses: 
        '200':
          description: Successful response
        '403':
          description: Forbidden
  /crate/{id}/items:
    get:
      security:
        - Bearer: []
      summary: Get items in a crate
      description: Get albums, tracks, and artists in a crate
      tags:
        - Crates
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
          description: The number of items to return 
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
          description: The index of the first item to return. Use with limit to get the next set of items.
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad request
  /crate/{id}/item:  
      post:
        security:
          - Bearer: []
        summary: Add an item to a crate
        description: Add a track, album, or artist to a crate by its key, or add a custom item
        tags:
          - Crates
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
        requestBody:        
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/KeyPath'
                    name: path                  
                  - $ref: '#/components/schemas/CrateItem'
        responses:
          '200':
            description: Item added
          '403':
            description: Forbidden
      delete:
        security:
          - Bearer: []
        summary: Remove an item from a crate
        description: Remove the item at the specified index from the crate
        tags:
          - Crates
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
          - name: index
            in: path
            required: true
            schema:
              type: integer
            description: Zero-based index of the item to remove (i.e., the first item is 0)
        responses:
          '200':
            description: Item removed
          '400':
            description: Bad request
          '403':
            description: Forbidden
  /crate/{id}/item/{index}/reorder/{newIndex}:
    patch:
      security:
        - Bearer: []
      summary: Reorder an item in a crate
      description: Move an item from one index to another
      tags:
        - Crates
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: index
          in: path
          required: true
          schema:
            type: integer
          description: Zero-based index of the item to reorder (i.e., the first item is 0)
        - name: newIndex
          in: path
          required: true
          schema:
            type: integer
          description: New zero-based index for the item (i.e., the second item is 1)
      responses:
        '200':
          description: Item reordered
        '403':
          description: Forbidden
  /playlist:
    get:
      security:
        - Bearer: []
      summary: Get playlist events
      description: Returns the most recently played tracks and breaks
      tags:
        - Playlist
      parameters:      
        - name: start
          in: query
          required: false
          schema:
            type: integer
          description: 'The number of milliseconds since January 1, 1970, 00:00:00 UTC (the ECMAScript epoch, equivalent to the UNIX epoch), with leap seconds ignored. Default: 3 hours before the time of the request'
        - name: end
          in: query
          required: false
          schema:
            type: integer
          description: 'The number of milliseconds since January 1, 1970, 00:00:00 UTC (the ECMAScript epoch, equivalent to the UNIX epoch), with leap seconds ignored. Default: The current time'
      responses:
        '200':
          description: Successful response  
  /playlist/break:
    post:
      security:
        - Bearer: []
      summary: Add playlist break
      description: 
        Adds a break to the playlist.
        Only DJs and music directors can add to the playlist.
      tags:
        - Playlist
      responses:
        '201':
          description: Item added
        '403':
          description: Forbidden
  /playlist/track:
    post:
      security:
        - Bearer: []
      summary: Add playlist track
      description: 
        Adds a track to the playlist.
        Only DJs and music directors can add to the playlist.
      tags:
        - Playlist
      requestBody:        
        content:
          application/json:
            schema:              
              - $ref: '#/components/schemas/PlaylistTrack'
      responses:
        '201':
          description: Item added
        '403':
          description: Forbidden
  /playlist/freeform:
    post:
      security:
        - Bearer: []
      summary: Add freeform playlist track
      description: 
        Adds a freeform track to the playlist.
        Only DJs and music directors can add to the playlist.
      tags:
        - Playlist
      requestBody:        
        content:
          application/json:
            schema:              
              - $ref: '#/components/schemas/FreeformPlaylistTrack'
      responses:
        '201':
          description: Item added
        '403':
          description: Forbidden
  /playlist/:id:
    delete:
      security:
        - Bearer: []
      summary: Delete break or track
      description: 
        Delete a track or break from the playlist.
        Only DJs and music directors can delete from the playlist.
      tags:
        - Playlist
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer 
      responses:
        '200':
          description: Deleted
        '403':
          description: Forbidden
    patch:
      security:
        - Bearer: []
      summary: Update a track
      description: 
        Update a track on the playlist.
        Only DJs and music directors can update the playlist.
      tags:
        - Playlist
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer 
        - name: notes
          in: body
          required: true
          schema:
            type: string 
      responses:
        '200':
          description: Updated
        '403':
          description: Forbidden
  /playlist/rotation:
    get:
      security:
        - Bearer: []
      summary: Get rotation plays
      description: Returns playlist tracks from albums in rotation
      tags:
        - Playlist
      parameters:
        - name: start
          in: query
          required: false
          schema:
            type: integer
          description: 'The number of milliseconds since January 1, 1970, 00:00:00 UTC (the ECMAScript epoch, equivalent to the UNIX epoch), with leap seconds ignored. Default: 7 days before the time of the request'
        - name: end
          in: query
          required: false
          schema:
            type: integer
          description: 'The number of milliseconds since January 1, 1970, 00:00:00 UTC (the ECMAScript epoch, equivalent to the UNIX epoch), with leap seconds ignored. Default: The current time'
      responses:
        '200':
          description: Successful response 
  /search:
    get:
      security:
        - Bearer: []
      summary: Search the library
      description: Search for an album, track, or artist, or search the text of a review
      parameters:
        - name: term
          in: query
          required: false
          schema:
            type: string
          description: The search term
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: The number of albums to return. 
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
          description: The index of the first album to return. Use with limit to get the next set of albums.
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum: 
              - album
              - track              
          description: Limit the search and results to albums or tracks
        - name: album[is_compilation]
          in: query
          required: false
          schema:
            type: boolean           
        - name: album[label]
          in: query
          required: false
          schema:
            type: string
        - name: album[local]
          in: query
          required: false
          schema:
            type: string
            enum: 
              - any
              - current
              - classic
        - name: album[rotation]
          in: query
          required: false
          schema:
            type: string
            enum: 
              - any
              - heavy
              - light
        - name: album[year]
          in: query
          required: false
          schema:
            type: integer
        - name: track[duration][gte]
          in: query
          required: false
          schema:
            type: integer
          description: Minimum track length in milliseconds
        - name: track[duration][lte]
          in: query
          required: false
          schema:
            type: integer
          description: Maximum track length in milliseconds
        - name: track[is_recommended]
          in: query
          required: false
          schema:
            type: boolean
  /spot:
    get:
      security:
        - Bearer: []
      summary: List spots
      tags:
        - Spots
      description: List all spots
      parameters:
        - name: active
          in: query
          required: false
          default: true
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfSpots'
    post:
      security:
        - Bearer: []
      summary: Add a spot  
      description:
        Only users with the traffic log admin role can add spots.
      tags:
        - Spots 
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer 
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Spot'  
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
        '403':
          description: Forbidden
  /spot/{spot_id}:
    get:
      security:
        - Bearer: []
      summary: Get a spot  
      tags:
        - Spots 
      parameters:
        - name: spot_id
          in: path
          required: true
          schema:
            type: integer   
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Spot'
    patch:
      security:
        - Bearer: []
      summary: Update a spot
      description:
        Only users with the traffic log admin role can update spots.
      tags:
        - Spots
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses: 
        '204':
          description: No Content
        '400':
          description: Bad request
        '403':
          description: Forbidden
    delete:
      security:
        - Bearer: []
      summary: Delete a spot
      description:
        Only users with the traffic log admin role can delete a spot.
      tags:
        - Spots
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses: 
        '204':
          description: No Content
        '403':
          description: Forbidden
  /spot/{spot_id}/copy:  
      post:
        security:
          - Bearer: []
        summary: Add copy to a spot
        description: 
          Add a bit of copy that could be read for a given spot.
          Only users with the traffic log admin role can add copy.
        tags:
          - Spots
        parameters:
          - name: spot_id
            in: path
            required: true
            schema:
              type: integer
        requestBody:        
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpotCopy'
        responses:
          '201':
            description: Created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SpotCopy'
          '400':
            description: Bad request
          '403':
            description: Forbidden
  /spot/copy/{id}:
    patch:
      security:
        - Bearer: []
      summary: Update copy
      description:
        Only users with the traffic log admin role can update copy.
      tags:
        - Spots
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses: 
        '204':
          description: No Content
        '400':
          description: Bad request
        '403':
          description: Forbidden
    delete:
      security:
        - Bearer: []
      summary: Delete copy 
      description:
          Only users with the traffic log admin role can delete copy.      
      tags:
        - Spots
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content        
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /traffic-log:
    get:
      security:
        - Bearer: []
      summary: List traffic log entries
      tags:
        - Traffic Log
      description: 
        Returns a list of traffic log entries for the next three hours, starting at the top of the current hour.
        Entries that have already been read have values for "logtime", "readtime", "reader", or "__key".
        Entries still to be read have a random copy but no values for those properties. They can be posted to the API to be saved to the database.       
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfTrafficLogEntries'
    post:
      security:
        - Bearer: []
      summary: Add an entry to the log  
      description:
        Mark the copy for a timeslot as read
      tags:
        - Traffic Log 
      requestBody:        
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrafficLogEntry'  
      responses:
        '201':
          description: Created
          content:            
            application/json:
              schema:
                $ref: '#/components/schemas/TrafficLogEntry'
  /traffic-log/report:
    get:
      security:
        - Bearer: []
      summary: Download CSV of entries
      tags:
        - Traffic Log
      parameters:
        - name: start
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: end
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Success
          content:
            text/csv:
              schema: 
                type: string
        '403':
          description: Forbidden
